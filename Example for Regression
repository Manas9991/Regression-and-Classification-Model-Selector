{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HE Employee Burnout Comp.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "3lt2CN-hWqzn",
        "_jyAQVOO9AsJ",
        "Hdl1nYVcMXq8"
      ],
      "authorship_tag": "ABX9TyNPmKaQ6Lpm4ponJxQorPjl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Manas9991/Regression-and-Classification-Model-Selector/blob/master/HE_Employee_Burnout_Comp.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3lt2CN-hWqzn"
      },
      "source": [
        "###Importing Libraries and Data:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8qTEDPbuTfrk"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from scipy.stats import mode\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import xgboost as xgb\n",
        "from sklearn.ensemble import AdaBoostRegressor\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.linear_model import ElasticNetCV\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.linear_model import RidgeCV\n",
        "from sklearn.linear_model import SGDRegressor\n",
        "from sklearn.linear_model import ARDRegression\n",
        "from sklearn.linear_model import HuberRegressor\n",
        "from sklearn.linear_model import TheilSenRegressor\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, max_error"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Npuh0XJIOsT8"
      },
      "source": [
        "dfr = pd.read_csv(r'train.csv')\n",
        "dfs = pd.read_csv(r'test.csv')"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IpbEOuohOsUC"
      },
      "source": [
        "### Cleaning Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BBLlqOgkOsUD",
        "outputId": "e610fd38-10b7-4fe2-eee6-5463514a02cb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        }
      },
      "source": [
        "dfr.head(10)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Employee ID</th>\n",
              "      <th>Date of Joining</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "      <th>Burn Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>fffe32003000360033003200</td>\n",
              "      <td>2008-09-30</td>\n",
              "      <td>Female</td>\n",
              "      <td>Service</td>\n",
              "      <td>No</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>0.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>fffe3700360033003500</td>\n",
              "      <td>2008-11-30</td>\n",
              "      <td>Male</td>\n",
              "      <td>Service</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>fffe31003300320037003900</td>\n",
              "      <td>2008-03-10</td>\n",
              "      <td>Female</td>\n",
              "      <td>Product</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>0.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>fffe32003400380032003900</td>\n",
              "      <td>2008-11-03</td>\n",
              "      <td>Male</td>\n",
              "      <td>Service</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>fffe31003900340031003600</td>\n",
              "      <td>2008-07-24</td>\n",
              "      <td>Female</td>\n",
              "      <td>Service</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>fffe3300350037003500</td>\n",
              "      <td>2008-11-26</td>\n",
              "      <td>Male</td>\n",
              "      <td>Product</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>0.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>fffe33003300340039003100</td>\n",
              "      <td>2008-01-02</td>\n",
              "      <td>Female</td>\n",
              "      <td>Service</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>7.9</td>\n",
              "      <td>0.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>fffe32003600320037003400</td>\n",
              "      <td>2008-10-31</td>\n",
              "      <td>Female</td>\n",
              "      <td>Service</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.4</td>\n",
              "      <td>0.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>fffe32003200300034003700</td>\n",
              "      <td>2008-12-27</td>\n",
              "      <td>Female</td>\n",
              "      <td>Service</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>fffe31003600320030003200</td>\n",
              "      <td>2008-03-09</td>\n",
              "      <td>Female</td>\n",
              "      <td>Product</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.67</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Employee ID Date of Joining  ... Mental Fatigue Score Burn Rate\n",
              "0  fffe32003000360033003200      2008-09-30  ...                  3.8      0.16\n",
              "1      fffe3700360033003500      2008-11-30  ...                  5.0      0.36\n",
              "2  fffe31003300320037003900      2008-03-10  ...                  5.8      0.49\n",
              "3  fffe32003400380032003900      2008-11-03  ...                  2.6      0.20\n",
              "4  fffe31003900340031003600      2008-07-24  ...                  6.9      0.52\n",
              "5      fffe3300350037003500      2008-11-26  ...                  3.6      0.29\n",
              "6  fffe33003300340039003100      2008-01-02  ...                  7.9      0.62\n",
              "7  fffe32003600320037003400      2008-10-31  ...                  4.4      0.33\n",
              "8  fffe32003200300034003700      2008-12-27  ...                  NaN      0.56\n",
              "9  fffe31003600320030003200      2008-03-09  ...                  NaN      0.67\n",
              "\n",
              "[10 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-z2w6dRoDpbe",
        "outputId": "698bdc41-1971-4e4d-ad24-30f9c5e5eb96",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "dfs.tail()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Employee ID</th>\n",
              "      <th>Date of Joining</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12245</th>\n",
              "      <td>fffe3900310034003700</td>\n",
              "      <td>2008-10-02</td>\n",
              "      <td>Female</td>\n",
              "      <td>Service</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12246</th>\n",
              "      <td>fffe32003600330034003000</td>\n",
              "      <td>2008-03-31</td>\n",
              "      <td>Female</td>\n",
              "      <td>Product</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12247</th>\n",
              "      <td>fffe31003800340039003000</td>\n",
              "      <td>2008-02-12</td>\n",
              "      <td>Male</td>\n",
              "      <td>Service</td>\n",
              "      <td>No</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>9.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12248</th>\n",
              "      <td>fffe32003600380031003800</td>\n",
              "      <td>2008-02-06</td>\n",
              "      <td>Male</td>\n",
              "      <td>Service</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>6.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12249</th>\n",
              "      <td>fffe32003100390037003800</td>\n",
              "      <td>2008-08-05</td>\n",
              "      <td>Female</td>\n",
              "      <td>Product</td>\n",
              "      <td>No</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    Employee ID  ... Mental Fatigue Score\n",
              "12245      fffe3900310034003700  ...                  6.1\n",
              "12246  fffe32003600330034003000  ...                  5.9\n",
              "12247  fffe31003800340039003000  ...                  9.6\n",
              "12248  fffe32003600380031003800  ...                  6.7\n",
              "12249  fffe32003100390037003800  ...                  2.0\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JcNeLUyRTLZN"
      },
      "source": [
        "# plt.figure(figsize=(8, 10))\n",
        "# plt.scatter(range(len(dfr['Mental Fatigue Score'])), dfr['Mental Fatigue Score'], color='red')\n",
        "# plt.show()"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UOL6zN2kdJH-",
        "outputId": "2d238055-40f7-426d-aece-389db8dcf0ce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dfr['Company Type'].value_counts()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Service    14833\n",
              "Product     7917\n",
              "Name: Company Type, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uojythq-dP1P"
      },
      "source": [
        "dfr['Gender'] = dfr['Gender'].apply(lambda x: 0 if x=='Female' else 1)\n",
        "dfs['Gender'] = dfs['Gender'].apply(lambda x: 0 if x=='Female' else 1)\n",
        "dfr['Company Type'] = dfr['Company Type'].apply(lambda x: 0 if x=='Service' else 1)\n",
        "dfs['Company Type'] = dfs['Company Type'].apply(lambda x: 0 if x=='Service' else 1)\n",
        "dfr['WFH Setup Available'] = dfr['WFH Setup Available'].apply(lambda x: 0 if x=='No' else 1)\n",
        "dfs['WFH Setup Available'] = dfs['WFH Setup Available'].apply(lambda x: 0 if x=='No' else 1)\n",
        "id = dfs['Employee ID']\n",
        "dfr = dfr.drop(columns=['Employee ID'])\n",
        "dfs = dfs.drop(columns=['Employee ID'])"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qskqPDoleQ5X"
      },
      "source": [
        "dfr[['Year of joining', 'Month of joining', 'Day of joining']] = dfr['Date of Joining'].str.split('-', expand = True)\n",
        "dfr = dfr.drop(columns = ['Year of joining', 'Day of joining', 'Date of Joining'])\n",
        "dfs[['Year of joining', 'Month of joining', 'Day of joining']] = dfs['Date of Joining'].str.split('-', expand = True)\n",
        "dfs = dfs.drop(columns = ['Year of joining', 'Day of joining', 'Date of Joining'])"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xA3G3dMhgJU9",
        "outputId": "7471b307-f993-495e-81f4-18587e302acd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "dfr.head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "      <th>Burn Rate</th>\n",
              "      <th>Month of joining</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.8</td>\n",
              "      <td>0.16</td>\n",
              "      <td>09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.36</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>0.49</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.20</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.52</td>\n",
              "      <td>07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Gender  Company Type  ...  Burn Rate  Month of joining\n",
              "0       0             0  ...       0.16                09\n",
              "1       1             0  ...       0.36                11\n",
              "2       0             1  ...       0.49                03\n",
              "3       1             0  ...       0.20                11\n",
              "4       0             0  ...       0.52                07\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QVc5lzH5h2TS",
        "outputId": "a5172e80-528a-48fb-ace0-1f0e70088ac4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dfr['Month of joining'].value_counts()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "08    1972\n",
              "10    1970\n",
              "09    1968\n",
              "03    1947\n",
              "07    1911\n",
              "01    1903\n",
              "05    1900\n",
              "04    1861\n",
              "12    1844\n",
              "11    1841\n",
              "02    1832\n",
              "06    1801\n",
              "Name: Month of joining, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ty4k90HKh_35",
        "outputId": "c481cf1a-0fe7-4b2c-ebd1-8c83ce29de3c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dfr['Designation'].value_counts()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.0    7588\n",
              "3.0    5985\n",
              "1.0    4881\n",
              "4.0    2391\n",
              "0.0    1507\n",
              "5.0     398\n",
              "Name: Designation, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HmVojICKjGNS"
      },
      "source": [
        "Missing values treatment"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u1pw4DbujDwZ",
        "outputId": "14e59253-6bc3-42bd-e8c8-25501a32f4fa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "dfr.describe()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "      <th>Burn Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>21369.000000</td>\n",
              "      <td>20633.000000</td>\n",
              "      <td>21626.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.476571</td>\n",
              "      <td>0.348000</td>\n",
              "      <td>0.540220</td>\n",
              "      <td>2.178725</td>\n",
              "      <td>4.481398</td>\n",
              "      <td>5.728188</td>\n",
              "      <td>0.452005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.499462</td>\n",
              "      <td>0.476346</td>\n",
              "      <td>0.498391</td>\n",
              "      <td>1.135145</td>\n",
              "      <td>2.047211</td>\n",
              "      <td>1.920839</td>\n",
              "      <td>0.198226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.600000</td>\n",
              "      <td>0.310000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>5.900000</td>\n",
              "      <td>0.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>7.100000</td>\n",
              "      <td>0.590000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             Gender  Company Type  ...  Mental Fatigue Score     Burn Rate\n",
              "count  22750.000000  22750.000000  ...          20633.000000  21626.000000\n",
              "mean       0.476571      0.348000  ...              5.728188      0.452005\n",
              "std        0.499462      0.476346  ...              1.920839      0.198226\n",
              "min        0.000000      0.000000  ...              0.000000      0.000000\n",
              "25%        0.000000      0.000000  ...              4.600000      0.310000\n",
              "50%        0.000000      0.000000  ...              5.900000      0.450000\n",
              "75%        1.000000      1.000000  ...              7.100000      0.590000\n",
              "max        1.000000      1.000000  ...             10.000000      1.000000\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sQ0-8PgyjlhG",
        "outputId": "9ac20968-c13f-47bd-e080-d5d92e3c72dd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "dfs.describe()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>12250.000000</td>\n",
              "      <td>12250.000000</td>\n",
              "      <td>12250.000000</td>\n",
              "      <td>12250.000000</td>\n",
              "      <td>12250.000000</td>\n",
              "      <td>12250.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.473878</td>\n",
              "      <td>0.346612</td>\n",
              "      <td>0.541878</td>\n",
              "      <td>2.175265</td>\n",
              "      <td>4.458857</td>\n",
              "      <td>5.720571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.499338</td>\n",
              "      <td>0.475910</td>\n",
              "      <td>0.498264</td>\n",
              "      <td>1.132885</td>\n",
              "      <td>2.045602</td>\n",
              "      <td>1.914063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>5.900000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>7.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             Gender  Company Type  ...  Resource Allocation  Mental Fatigue Score\n",
              "count  12250.000000  12250.000000  ...         12250.000000          12250.000000\n",
              "mean       0.473878      0.346612  ...             4.458857              5.720571\n",
              "std        0.499338      0.475910  ...             2.045602              1.914063\n",
              "min        0.000000      0.000000  ...             1.000000              0.000000\n",
              "25%        0.000000      0.000000  ...             3.000000              4.500000\n",
              "50%        0.000000      0.000000  ...             4.000000              5.900000\n",
              "75%        1.000000      1.000000  ...             6.000000              7.100000\n",
              "max        1.000000      1.000000  ...            10.000000             10.000000\n",
              "\n",
              "[8 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FezoRZrV4BWx",
        "outputId": "25fb7844-498e-401e-d409-5c3120ab90f0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "source": [
        "corrMatrix = dfr.corr()\n",
        "corrMatrix = corrMatrix.apply(lambda x: abs(x))\n",
        "sns.heatmap(corrMatrix, annot=True)\n",
        "plt.show()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YV2oY-qml_DM"
      },
      "source": [
        "Method #1: Listwise Deletion"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xc_qjUewjnFZ"
      },
      "source": [
        "# dfr.dropna(inplace=True)\n",
        "# dfr.describe()"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q6yQaCO2mFLH"
      },
      "source": [
        "Method #2: Mean or Null Substitution"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9nYFZJOemE3Q"
      },
      "source": [
        "# nan_col = ['Resource Allocation',\t'Mental Fatigue Score',\t'Burn Rate']\n",
        "# for i in nan_col:\n",
        "#   dfr[i] = dfr[i].fillna(np.mean(dfr[i]))#(0)\n",
        "# dfr.describe()  "
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lqQPA-Kh3EJN"
      },
      "source": [
        "Method #3: Regression Imputation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fAcsvrGJ3Osg",
        "outputId": "bc20d4d7-6979-48fa-f840-74dfddd1c083",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "### Add more columns in each regression imputation ###\n",
        "nan_col = ['Resource Allocation',\t'Mental Fatigue Score',\t'Burn Rate']\n",
        "traindat = dfr.dropna() #Create a dataset to train the model\n",
        "filler = LinearRegression()\n",
        "for i in nan_col:\n",
        "  yy = traindat[i]\n",
        "  if (i=='Resource Allocation'): #Filling these values using designation, as covariance is high\n",
        "    xx = traindat[['Designation']] \n",
        "    filler.fit(xx, yy) #model has been trained\n",
        "    nully = dfr[i].isnull() #a boolean array which will store True if corresponding ResAlloc value is null\n",
        "    for j in dfr.index: #using model to fill each missing value\n",
        "      if (nully[j] == True): #if missing value is detected in ResAlloc\n",
        "        #update missing value using corresponding designation value in LR model\n",
        "        dfr.at[j, i] = filler.predict(dfr['Designation'].loc[j].reshape(1, -1))\n",
        "  elif (i=='Mental Fatigue Score'):\n",
        "    xx = traindat[['Resource Allocation']] \n",
        "    filler.fit(xx, yy) \n",
        "    nully = dfr[i].isnull()\n",
        "    for j in dfr.index:\n",
        "      if (nully[j] == True): \n",
        "        dfr.at[j, i] = filler.predict(dfr['Resource Allocation'].loc[j].reshape(1, -1))\n",
        "  else:\n",
        "    xx = traindat[['Mental Fatigue Score']]\n",
        "    filler.fit(xx, yy) \n",
        "    nully = dfr[i].isnull() \n",
        "    for j in dfr.index: \n",
        "      if (nully[j] == True):\n",
        "        dfr.at[j, i] = filler.predict(dfr['Mental Fatigue Score'].loc[j].reshape(1, -1))\n",
        "dfr.describe()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "      <th>Burn Rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "      <td>22750.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.476571</td>\n",
              "      <td>0.348000</td>\n",
              "      <td>0.540220</td>\n",
              "      <td>2.178725</td>\n",
              "      <td>4.481380</td>\n",
              "      <td>5.728853</td>\n",
              "      <td>0.451887</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.499462</td>\n",
              "      <td>0.476346</td>\n",
              "      <td>0.498391</td>\n",
              "      <td>1.135145</td>\n",
              "      <td>2.031797</td>\n",
              "      <td>1.888664</td>\n",
              "      <td>0.197437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.105224</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.600000</td>\n",
              "      <td>0.320000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.202346</td>\n",
              "      <td>5.900000</td>\n",
              "      <td>0.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.590000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             Gender  Company Type  ...  Mental Fatigue Score     Burn Rate\n",
              "count  22750.000000  22750.000000  ...          22750.000000  22750.000000\n",
              "mean       0.476571      0.348000  ...              5.728853      0.451887\n",
              "std        0.499462      0.476346  ...              1.888664      0.197437\n",
              "min        0.000000      0.000000  ...              0.000000     -0.105224\n",
              "25%        0.000000      0.000000  ...              4.600000      0.320000\n",
              "50%        0.000000      0.000000  ...              5.900000      0.450000\n",
              "75%        1.000000      1.000000  ...              7.000000      0.590000\n",
              "max        1.000000      1.000000  ...             10.000000      1.000000\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FFhpnyFM3Pyg"
      },
      "source": [
        "Method #4: CarryForward Last Value"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_TdQs5sN3TDL"
      },
      "source": [
        "# nan_col = ['Resource Allocation',\t'Mental Fatigue Score',\t'Burn Rate']\n",
        "# for i in nan_col:\n",
        "#   nully = dfr[i].isnull() #a boolean array which will store True if corresponding value is null\n",
        "#   for j in dfr.index: #fill each missing value\n",
        "#     if (nully[j] == True): \n",
        "#       dfr.at[j, i] = dfr.at[j-1, i]\n",
        "# dfr.describe()"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t7rST91h3yqB"
      },
      "source": [
        "Missing data can be handled in a better way by trying to apply any of the methods above to some rows that are not significantly blank."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jmi5Ry_539nF",
        "outputId": "5d4fb0e9-a28b-4604-ab7d-b2d69255bc6b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "dfr.head()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Company Type</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "      <th>Burn Rate</th>\n",
              "      <th>Month of joining</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.8</td>\n",
              "      <td>0.16</td>\n",
              "      <td>09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.36</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.202346</td>\n",
              "      <td>5.8</td>\n",
              "      <td>0.49</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.20</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.52</td>\n",
              "      <td>07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Gender  Company Type  ...  Burn Rate  Month of joining\n",
              "0       0             0  ...       0.16                09\n",
              "1       1             0  ...       0.36                11\n",
              "2       0             1  ...       0.49                03\n",
              "3       1             0  ...       0.20                11\n",
              "4       0             0  ...       0.52                07\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iGDSBKwL4r6R"
      },
      "source": [
        "Company type is not contributing towards the results, also, the gender seems to not be contributing much. [Based on covariance matrix]"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nUApiaJ54eHE",
        "outputId": "afed93f4-b7f7-457c-cc02-ff872341c4f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "dfr.drop(columns=['Company Type'], inplace=True)\n",
        "dfs.drop(columns=['Company Type'], inplace=True)\n",
        "dfr.head()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>WFH Setup Available</th>\n",
              "      <th>Designation</th>\n",
              "      <th>Resource Allocation</th>\n",
              "      <th>Mental Fatigue Score</th>\n",
              "      <th>Burn Rate</th>\n",
              "      <th>Month of joining</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.8</td>\n",
              "      <td>0.16</td>\n",
              "      <td>09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.36</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.202346</td>\n",
              "      <td>5.8</td>\n",
              "      <td>0.49</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.20</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.52</td>\n",
              "      <td>07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Gender  WFH Setup Available  ...  Burn Rate  Month of joining\n",
              "0       0                    0  ...       0.16                09\n",
              "1       1                    1  ...       0.36                11\n",
              "2       0                    1  ...       0.49                03\n",
              "3       1                    1  ...       0.20                11\n",
              "4       0                    0  ...       0.52                07\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j31Y6_Zy5QH5"
      },
      "source": [
        "Applying PCA to check covariance explained with reduced dimensions:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i2wlDcRs5uLy"
      },
      "source": [
        "X = dfr.drop(columns=['Burn Rate'])\n",
        "y = dfr['Burn Rate']"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uV2vhIBy7cpR"
      },
      "source": [
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "538Vzytd5Uqh"
      },
      "source": [
        "# N = 3\n",
        "# pca = PCA(n_components = N)\n",
        "# pca.fit(X)\n",
        "# plt.bar(range(N), pca.explained_variance_ratio_, color = 'orange')\n",
        "# plt.plot(range(N), pca.explained_variance_ratio_, color='black')\n",
        "# plt.show()\n",
        "# print(pca.explained_variance_ratio_)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7uiuxijT7NzA"
      },
      "source": [
        "3 Components explain 91.7% variance, thus, reducing dimensions to 3. 4 Components explain 97%"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mIWACfQp8qq7"
      },
      "source": [
        "# X = pca.transform(X)\n",
        "x = pd.DataFrame(X)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_jyAQVOO9AsJ"
      },
      "source": [
        "###Applying Regression Algorithms:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UjXPG5xQZmu5"
      },
      "source": [
        "models = ['Linear Regression', 'XgBoost', 'Lasso', 'Elastic Net CV', 'Ridge', 'RidgeCV', 'SGDRegressor', 'HuberRegressor', 'TheilSenRegressor','Neural Network']#, 'AdaBoost', 'ARDRegression', 'Polynomial Regression']\n",
        "MSE = []\n",
        "r2 = []\n",
        "MAS = []\n",
        "Maxe = []"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zt4TSUC-NZm1"
      },
      "source": [
        "def evaluate(truth, pred):\n",
        "  MSE.append(mean_squared_error(truth, pred))\n",
        "  r2.append(r2_score(truth, pred))\n",
        "  MAS.append(mean_absolute_error(truth, pred))\n",
        "  Maxe.append(max_error(truth, pred))"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XUTGSMKEa9nG"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(x, y, train_size = 0.85)"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VrcDnnIY2bmf"
      },
      "source": [
        "LR = LinearRegression(normalize=True) #use np.polyfit for polynomial regression\n",
        "LR.fit(X_train, y_train)\n",
        "y_pred = LR.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2EGwvWKFhSj3"
      },
      "source": [
        "xgb_model = xgb.XGBRegressor(eta=0.001, max_depth = 6, subsample = 1, colsample_bytree = 0.5, objective = 'reg:squarederror', normalize=True, eval_metric = 'rmse') #Change objective accordingly\n",
        "xgb_model.fit(X_train, y_train)\n",
        "y_pred = xgb_model.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t97tzseynCES"
      },
      "source": [
        "lasso = Lasso(random_state=0, max_iter=10000)\n",
        "alphas = np.logspace(-4, -0.5, 30)\n",
        "\n",
        "tuned_parameters = [{'alpha': alphas}]\n",
        "n_folds = 10\n",
        "\n",
        "clf = GridSearchCV(lasso, tuned_parameters, cv=n_folds, n_jobs=1, scoring='neg_mean_squared_error')\n",
        "clf.fit(x, y)\n",
        "scores = clf.cv_results_['mean_test_score']\n",
        "MSE.append(-1*max(scores))\n",
        "r2.append(-1*max(scores))\n",
        "MAS.append(-1*max(scores))\n",
        "Maxe.append(-1*max(scores))"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VqyYxS8VCKzs"
      },
      "source": [
        "ENcv = ElasticNetCV(l1_ratio=0.5, eps=0.001, n_alphas=100, fit_intercept=True, normalize=True, max_iter=10000)\n",
        "ENcv.fit(X_train, y_train)\n",
        "y_pred = ENcv.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cCiVPeeNDj2p"
      },
      "source": [
        "r = Ridge(normalize=True)\n",
        "r.fit(X_train, y_train)\n",
        "y_pred = r.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "itfFJYYuEUBH"
      },
      "source": [
        "rCV = RidgeCV(normalize=True)\n",
        "rCV.fit(X_train, y_train)\n",
        "y_pred = rCV.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JdOHvMM9Eo09"
      },
      "source": [
        "sgdr = SGDRegressor(loss='squared_loss') #The possible values are ‘squared_loss’, ‘huber’, ‘epsilon_insensitive’, or ‘squared_epsilon_insensitive’\n",
        "sgdr.fit(X_train, y_train)\n",
        "y_pred = sgdr.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EGkWxTw6GKQm"
      },
      "source": [
        "hub = HuberRegressor(epsilon = 1.1, max_iter = 800)  #Epsilon min = 1, default = 1.35. The smaller the epsilon, the more robust it is to outliers.\n",
        "hub.fit(X_train, y_train)\n",
        "y_pred = hub.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "giirdxpiG84h"
      },
      "source": [
        "theil = TheilSenRegressor()\n",
        "theil.fit(X_train, y_train)\n",
        "y_pred = theil.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GO17Ql8kejmv"
      },
      "source": [
        "NN = MLPRegressor(hidden_layer_sizes=(8, 4, 1), activation='logistic', solver='adam', \n",
        "                   alpha=0.0001, batch_size='auto', learning_rate='adaptive', \n",
        "                   learning_rate_init=0.001, power_t=0.5, max_iter=10000, \n",
        "                   shuffle=True, random_state=0, tol=0.00001, verbose=False, warm_start=False, \n",
        "                   momentum=0.9, nesterovs_momentum=True, early_stopping=True, \n",
        "                   validation_fraction=0.2, beta_1=0.9, beta_2=0.999, \n",
        "                   epsilon=1e-08, n_iter_no_change=10, max_fun=15000)\n",
        "NN.fit(X_train, y_train)\n",
        "y_pred = NN.predict(X_test)\n",
        "evaluate(y_test, y_pred)"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "51hFHk24kx32"
      },
      "source": [
        "# param_dist = {\n",
        "#  'n_estimators': [50, 100, 200],\n",
        "#  'learning_rate' : [0.001,0.05,0.1],\n",
        "#  'loss' : ['linear', 'square', 'exponential']\n",
        "#  }\n",
        "\n",
        "# abr = GridSearchCV(AdaBoostRegressor(), param_dist, cv=5, n_jobs=1, scoring='r2')\n",
        "# abr.fit(x, y)\n",
        "# MSE.append(-1*max(abr.cv_results_['mean_test_score']))\n",
        "# r2.append(-1*max(abr.cv_results_['mean_test_score']))\n",
        "# MAS.append(-1*max(abr.cv_results_['mean_test_score']))\n",
        "# Maxe.append(-1*max(abr.cv_results_['mean_test_score']))"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QTyTErMFF_9L"
      },
      "source": [
        "# #Takes a long time to run - WARNING\n",
        "# ardr = ARDRegression(n_iter = 5, normalize=True)\n",
        "# ardr.fit(X_train, y_train)\n",
        "# y_pred = ardr.predict(X_test)\n",
        "# evaluate(y_test, y_pred)"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "50Ihp81qBfdP"
      },
      "source": [
        "# d = 1 #set degree of curve fitting\n",
        "# coef = np.polyfit(X_train[:,0], y_train, d) #select column with maximum correlation for best results\n",
        "# def curvefit(x):\n",
        "#   y = 0\n",
        "#   for j in range(d):\n",
        "#     y += (x**(d-j))*coef[j] #find pattern and put in loop\n",
        "#   return y\n",
        "\n",
        "# y_pred = [curvefit(int(i)) for i in X_test[:,0]]\n",
        "# evaluate(y_test, y_pred)"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UpysMW70sa-L"
      },
      "source": [
        "###Performance metrics"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9IBvXsb5nyit",
        "outputId": "d2f1efd4-72bb-4bef-8c75-cd4df6e87d28",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        }
      },
      "source": [
        "Final = {'Model': models, 'Mean Square Error': MSE, 'R2 score': r2, 'Mean Absolute Error' : MAS, 'Max Error': Maxe}\n",
        "Final = pd.DataFrame(data=Final)\n",
        "Final"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Mean Square Error</th>\n",
              "      <th>R2 score</th>\n",
              "      <th>Mean Absolute Error</th>\n",
              "      <th>Max Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Linear Regression</td>\n",
              "      <td>0.003420</td>\n",
              "      <td>0.910710</td>\n",
              "      <td>0.046358</td>\n",
              "      <td>0.248752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>XgBoost</td>\n",
              "      <td>0.003203</td>\n",
              "      <td>0.916390</td>\n",
              "      <td>0.044486</td>\n",
              "      <td>0.269933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Lasso</td>\n",
              "      <td>0.003670</td>\n",
              "      <td>0.003670</td>\n",
              "      <td>0.003670</td>\n",
              "      <td>0.003670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Elastic Net CV</td>\n",
              "      <td>0.003448</td>\n",
              "      <td>0.909981</td>\n",
              "      <td>0.046253</td>\n",
              "      <td>0.249193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ridge</td>\n",
              "      <td>0.007701</td>\n",
              "      <td>0.798956</td>\n",
              "      <td>0.069261</td>\n",
              "      <td>0.304511</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>RidgeCV</td>\n",
              "      <td>0.003683</td>\n",
              "      <td>0.903846</td>\n",
              "      <td>0.047333</td>\n",
              "      <td>0.250309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>SGDRegressor</td>\n",
              "      <td>0.003428</td>\n",
              "      <td>0.910507</td>\n",
              "      <td>0.046426</td>\n",
              "      <td>0.247243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>HuberRegressor</td>\n",
              "      <td>0.003436</td>\n",
              "      <td>0.910310</td>\n",
              "      <td>0.046212</td>\n",
              "      <td>0.249345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>TheilSenRegressor</td>\n",
              "      <td>0.003487</td>\n",
              "      <td>0.908967</td>\n",
              "      <td>0.046749</td>\n",
              "      <td>0.248287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Neural Network</td>\n",
              "      <td>0.003377</td>\n",
              "      <td>0.911841</td>\n",
              "      <td>0.046237</td>\n",
              "      <td>0.248729</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               Model  Mean Square Error  ...  Mean Absolute Error  Max Error\n",
              "0  Linear Regression           0.003420  ...             0.046358   0.248752\n",
              "1            XgBoost           0.003203  ...             0.044486   0.269933\n",
              "2              Lasso           0.003670  ...             0.003670   0.003670\n",
              "3     Elastic Net CV           0.003448  ...             0.046253   0.249193\n",
              "4              Ridge           0.007701  ...             0.069261   0.304511\n",
              "5            RidgeCV           0.003683  ...             0.047333   0.250309\n",
              "6       SGDRegressor           0.003428  ...             0.046426   0.247243\n",
              "7     HuberRegressor           0.003436  ...             0.046212   0.249345\n",
              "8  TheilSenRegressor           0.003487  ...             0.046749   0.248287\n",
              "9     Neural Network           0.003377  ...             0.046237   0.248729\n",
              "\n",
              "[10 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hdl1nYVcMXq8"
      },
      "source": [
        "###Final Submission:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gFSFiGxBMaS2"
      },
      "source": [
        "dfs = scaler.fit_transform(dfs)\n",
        "# dfs = pca.fit_transform(dfs)\n",
        "dfs = pd.DataFrame(dfs)\n",
        "ansy = xgb_model.predict(dfs) #Remember to train on 100% data before submission\n",
        "ide = []\n",
        "ansye = []\n",
        "for i in range(len(ansy)+1):\n",
        "  if(i == 0):\n",
        "    ide.append(\"Employee ID\")\n",
        "    ansye.append(\"Burn Rate\")\n",
        "  else:\n",
        "    ide.append(id[i-1])\n",
        "    ansye.append(ansy[i-1])\n",
        "\n",
        "np.savetxt(\"Pred xgb.csv\", list(zip(ide, ansye)), delimiter=\",\", fmt='%s')"
      ],
      "execution_count": 42,
      "outputs": []
    }
  ]
}
